package edu.mobezzi.rest.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import edu.mobezzi.dao.AlumnoDTO;
import edu.mobezzi.dao.repositories.AlumnoDtoRepository;
import edu.mobezzi.responses.CustomResponseAlumno;

@CrossOrigin
@RestController
public class AlumnoController {

	@Autowired
	private AlumnoDtoRepository alumnoRepository;
	
	@GetMapping(value="alumnos")
	public List<AlumnoDTO> getAlumnos(){
		return this.alumnoRepository.findAll();
	}
	
	@GetMapping(value="alumnos/{id}")
	public CustomResponseAlumno getAlumnoById(@PathVariable int id){
		try {
			return new CustomResponseAlumno(false, "Se encontro un alumno con ese número de socio", this.alumnoRepository.findById(id).get());
		}catch(Exception e) {
			System.out.println(e.getMessage());
			return new CustomResponseAlumno(true, "No se encontro un alumno con ese número de socio", null);
		}
	}
	
	@GetMapping(value="alumnos/curso/{id}")
	public List<AlumnoDTO> getAlumnoByIdCurso(@PathVariable String id){
		try {
			List<AlumnoDTO> alumnos = this.alumnoRepository.findAll();
			List<AlumnoDTO> alumnosCurso = new ArrayList<AlumnoDTO>();
			for (AlumnoDTO alumno : alumnos) {
				if(alumno.getIdCurso() == id) {
					alumnosCurso.add(alumno);
				}
			return alumnosCurso;
		}catch(Exception e) {
			System.out.println(e.getMessage());
			return null;
		}
	}
	
	@PostMapping(value="alumnos")
	public CustomResponseAlumno addAlumno(@RequestBody AlumnoDTO alumno){
		if(alumno.valido()) {
			try {
				this.alumnoRepository.save(alumno);
				return new CustomResponseAlumno(false, "Alumno guardado satisfactoriamente", alumno);
			}catch(Exception e) {
				return new CustomResponseAlumno(true, e.getMessage(), null);
			}
		}else {
			return new CustomResponseAlumno(true, "Faltan campos obligatiorios", null);
		}
	}
	
	@PutMapping(value="alumnos")
	public CustomResponseAlumno modifyAlumno(@RequestBody AlumnoDTO alumno){
		alumno.mostrar();
		if(alumno.valido()) {
			try {
				AlumnoDTO modificacion = this.alumnoRepository.findById(alumno.getNumeroSocio()).get();
				modificacion.setNombre(alumno.getNombre());
				modificacion.setApellido(alumno.getApellido());
				modificacion.setDni(alumno.getDni());
				modificacion.setEmail(alumno.getEmail());
				modificacion.setFechaNacimiento(alumno.getFechaNacimiento());
				modificacion.setCertificadoData(alumno.getCertificadoData());
				modificacion.setCertificadoName(alumno.getCertificadoName());
				modificacion.setObraSocial(alumno.getObraSocial());
				modificacion.setIdCurso(alumno.getIdCurso());
				modificacion.setNombreTutor(alumno.getNombreTutor());
				modificacion.setApellidoTutor(alumno.getApellidoTutor());
				modificacion.setDniTutor(alumno.getDniTutor());
				modificacion.setTelefonoTutor(alumno.getTelefonoTutor());
				modificacion.setEmailTutor(alumno.getEmailTutor());
				this.alumnoRepository.save(modificacion);
				return new CustomResponseAlumno(false, "Alumno modificado correctamente", modificacion);
			}catch(Exception e) {
				return new CustomResponseAlumno(true,
					e.getMessage()=="No value present"?
						"No se encontro un alumno con ese número de socio":
						e.getMessage()=="could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"?
								"Falta completar algún dato, por favor revisa que esten todos":
								e.getMessage()
					, null);
			}
		}else {
			return new CustomResponseAlumno(true, "Faltan campos obligatiorios", null);
		}
	}
	
	@DeleteMapping(value="alumnos/{id}")
	public CustomResponseAlumno deleteAlumno(@PathVariable int id){
		try {
			AlumnoDTO borrar = this.alumnoRepository.findById(id).get();
			this.alumnoRepository.deleteById(id);
			return new CustomResponseAlumno(false,
					"Alumno eliminado con éxito"
					, borrar);
		}catch(Exception e) {
			return new CustomResponseAlumno(true,
				e.getMessage()
				, null);
		}
	}
	
}
