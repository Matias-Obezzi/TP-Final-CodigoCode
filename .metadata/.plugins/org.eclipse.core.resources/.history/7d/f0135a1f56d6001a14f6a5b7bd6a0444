package edu.mobezzi.rest.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import edu.mobezzi.dao.CursoDTO;
import edu.mobezzi.dao.repositories.CursoDtoRepository;
import edu.mobezzi.responses.CustomResponseCurso;
import edu.mobezzi.responses.Response;

@CrossOrigin
@RestController
public class CursoController {

	@Autowired
	private CursoDtoRepository cursoRepository;
	
	@GetMapping(value="cursos")
	public List<CursoDTO> getCursos(){
		return this.cursoRepository.findAll();
	}
	
	@GetMapping(value = "cursos/{id}")
	public CustomResponseCurso getCursoById(@PathVariable int id) {
		try {
			return new CustomResponseCurso(new Response<CursoDTO>(false, "Se encontro un curso con ese id", this.cursoRepository.findById(id).get()));
		}catch(Exception e) {
			return new CustomResponseCurso(new Response<CursoDTO>(false, e.getMessage(), null));
		}
	}
	
	@PostMapping(value = "cursos")
	public CustomResponseCurso addCurso(@RequestBody CursoDTO curso) {
		if(curso.valido()) {
			try {
				this.cursoRepository.save(curso);
				return new CustomResponseCurso(new Response<CursoDTO>(false, "Curso guardado satisfactoriamente", curso));
			}catch(Exception e) {
				return new CustomResponseCurso(true, e.getMessage(), null));
			}
		}else {
			return new CustomResponseCurso(true, "Faltan campos obligatiorios", null);
		}
	}
	
	@PutMapping(value = "cursos")
	public CustomResponseCurso modifyCurso(@RequestBody CursoDTO curso) {
		if(curso.valido()) {
			try {
				CursoDTO modificacion = this.cursoRepository.findById(curso.getCurso()).get();
				modificacion.setValor(curso.getValor());
				modificacion.setCategoria(curso.getCategoria());
				modificacion.setDias(curso.getDias());
				modificacion.setEdades(curso.getEdades());
				modificacion.setNivel(curso.getNivel());
				return new CustomResponseCurso(false, "Curso modificado satisfactoriamente", curso);
			}catch(Exception e) {
				return new CustomResponseCurso(true, e.getMessage(), null);
			}
		}else {
			return new CustomResponseCurso(true, "Faltan campos obligatiorios", null);
		}
	}
	
	@DeleteMapping(value="cursos/{id}")
	public CustomResponseCurso deleteCurso(@PathVariable int id){
		try {
			CursoDTO borrar = this.cursoRepository.findById(id).get();
			this.cursoRepository.deleteById(id);
			return new CustomResponseCurso(false,"Curso eliminado con Ã©xito", borrar);
		}catch(Exception e) {
			return new CustomResponseCurso(true, e.getMessage(), null);
		}
	}
	
}
